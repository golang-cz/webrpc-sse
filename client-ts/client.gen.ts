/* eslint-disable */
// webrpc-sse v1.0.0 5a7eee5a229adbbd13ff1ca380f435267170d395
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v1.0.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "5a7eee5a229adbbd13ff1ca380f435267170d395"

interface SSEEndpointHandlers<TData> {
  onData: (data: TData) => void
  onError?: (errorEvent: Event) => void
  onOpen?: (openEvent: Event) => void
  onClose?: () => void
}
type CloseSSEConnectionFunction = () => void
interface SSEReturn<TData> {
  subscribe: (handlers: SSEEndpointHandlers<TData>) => CloseSSEConnectionFunction
}
interface SSEOptions extends EventSourceInit {}

//
// Types
//
export interface Message {
  id: number
  msg: string
  author: string
  created_at: string
}

export interface Chat {
  sendMessage(args: SendMessageArgs, headers?: object): Promise<SendMessageReturn>
  subscribeMessages(options?: SSEOptions): SSEReturn<SubscribeMessagesReturn>
}

export interface SendMessageArgs {
  author: string
  msg: string
}

export interface SendMessageReturn {
  success: boolean
}
export interface SubscribeMessagesArgs {
}

export type SubscribeMessagesReturn = Message


//
// Client
//
export class Chat implements Chat {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Chat/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  sendMessage = (args: SendMessageArgs, headers?: object): Promise<SendMessageReturn> => {
    return this.fetch(
      this.url('SendMessage'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          success: <boolean>(_data.success)
        }
      })
    })
  }

  subscribeMessages = (options?: SSEOptions): SSEReturn<SubscribeMessagesReturn> => {
    const subscribe = (handlers: SSEEndpointHandlers<SubscribeMessagesReturn>) => {
      const evtSource = new EventSource(this.url('SubscribeMessages'), options)
      const { onData, onError, onOpen, onClose } = handlers

      // Add listeners
      evtSource.addEventListener("message", (e) => {
        const parsedData = JSON.parse(e.data) as SubscribeMessagesReturn
        onData(parsedData)
      });
      if (onError) {
        evtSource.addEventListener("error", onError)
      }
      if (onOpen) {
        evtSource.addEventListener("open", onOpen)
      }

      const close = () => {
        if (onClose) {
          onClose()
        }
        evtSource.close()
      }

      return close
    }

    return {
      subscribe
    };
  }
}


export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
